{"version":3,"sources":["components/home.png","components/Dashboard/dash.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","typography","fontFamily","useStyles","makeStyles","root","display","textAlign","menuButton","marginRight","menuButtonHidden","title","flexGrow","appBarSpacer","mixins","toolbar","content","height","overflow","container","paddingTop","spacing","paddingBottom","appBar","backgroundColor","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","paper","borderStyle","borderColor","borderWidth","padding","flexDirection","fixedHeight","storeHeight","leftbarHeight","button","margin","avatar","red","listSection","list","ul","Component","Dash","props","componentDidMount","a","axios","get","then","res","val","data","console","log","allStores","classes","listPaper","clsx","notCollected","storeCount","i","length","push","List","className","subheader","map","sectionId","key","Paper","style","alignItems","Typography","variant","color","component","Date","toString","Button","setState","stores","leaseCount","catch","window","alert","state","username","name","today","email","this","fixedHeightPaper","leftBarPaper","AppBar","position","open","Toolbar","noWrap","Container","maxWidth","Grid","item","xs","md","lg","Card","CardHeader","Avatar","aria-label","charAt","getDay","getMonth","getFullYear","CardContent","App","currentScreen","appContext","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec7de50f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.7bc7446a.png\";","import React, {Component} from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Clock from \"react-clock\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport {CardContent} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Home from \"../home.png\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport VpnKeyIcon from \"@material-ui/icons/VpnKey\";\r\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {createMuiTheme, makeStyles} from \"@material-ui/core/styles\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport clsx from \"clsx\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {red} from \"@material-ui/core/colors\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport axios from \"axios\";\r\n\r\nconst drawerWidth = 240;\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: '\"Apple Color Emoji\"'\r\n    }\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        textAlign: \"center\",\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    appBar: {\r\n        backgroundColor: 'rgba(0,0,0,0.8)',\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    paper: {\r\n        borderStyle: 'solid',\r\n        borderColor: 'black',\r\n        borderWidth: 2,\r\n        backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 600,\r\n    },\r\n    storeHeight: {\r\n        height: 215\r\n    },\r\n    leftbarHeight:{\r\n        height: 215\r\n    },\r\n    button: {\r\n        width: 200,\r\n        margin: theme.spacing(1),\r\n    },\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n    listSection: {\r\n        paddingTop: 10,\r\n        backgroundColor: 'inherit',\r\n    },\r\n    list:{\r\n      flexDirection: 'column'\r\n    },\r\n    ul: {\r\n        backgroundColor: 'inherit',\r\n        padding: 0,\r\n    }\r\n});\r\nfunction withMyHook(Component){\r\n    return function WrappedComponent(props){\r\n        const classes = useStyles();\r\n        return <Component {...props} classes={classes}/>\r\n    }\r\n}\r\nclass Dash extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: this.props.username,\r\n            name: \"Mohaimen Khan\",\r\n            today: new Date(),\r\n            email: this.props.email,\r\n            stores: [],\r\n            storeCount: 0,\r\n            leaseCount: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount = async function () {\r\n        await axios\r\n            .get('http://localhost:8888/stores/get_all')\r\n            .then(res => {\r\n                let val = res.data;\r\n                console.log(val);\r\n                let allStores = [];\r\n                const classes = this.props.classes;\r\n                const listPaper = clsx(classes.paper, classes.storeHeight);\r\n                let notCollected = 0;\r\n                let storeCount = 0;\r\n                for (let i=0; i < val['stores'].length; ++i){\r\n                    notCollected+=(val['stores'][i]['leaseAmount'] - val['stores'][i]['leasePaid'])\r\n                    storeCount++;\r\n                }\r\n                allStores.push(\r\n                    <List className={classes.list} subheader={<li />}>\r\n                        {val[\"stores\"].map((sectionId) => (\r\n                            <li key={`section-${sectionId}`} className={classes.listSection}>\r\n                                <ul className={classes.ul}>\r\n                                    <Paper className={listPaper} style={{alignItems: \"center\"}}>\r\n                                        <Typography variant=\"h5\" color=\"textSecondary\" component=\"p\">\r\n                                            {sectionId['name']}\r\n                                        </Typography> <br/>\r\n                                        <div style={{textAlign: 'left'}}>\r\n                                            <Typography variant=\"h7\" color=\"textPrimary\" component=\"p\">\r\n                                                <b style={{color: 'red'}}>Store Created By: </b> {sectionId['createdBy']}\r\n                                            </Typography>\r\n                                            <Typography variant=\"h7\" color=\"textPrimary\" component=\"p\">\r\n                                                <b>Lease: </b> {sectionId['leaseAmount']} |  <b>Lease Paid: </b> {sectionId['leasePaid']}\r\n                                            </Typography>\r\n                                            <Typography variant=\"h7\" color=\"textPrimary\" component=\"p\">\r\n                                                <b>Monthly Rent: </b> {sectionId['rent']}\r\n                                            </Typography>\r\n                                            <Typography variant=\"h7\" color=\"textSecondary\" component=\"p\">\r\n                                                <b>Lease Start: </b> {new Date(sectionId['leaseStart']).toString()}\r\n                                            </Typography>\r\n                                            <Typography variant=\"h7\" color=\"textSecondary\" component=\"p\">\r\n                                                <b>Lease End: </b> {new Date(sectionId['leaseEnd']).toString()}\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <div style={{display: 'inline'}}>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"primary\"\r\n                                                className={classes.button}\r\n                                            >\r\n                                                <b>Edit Lease</b>\r\n                                            </Button>\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                color=\"secondary\"\r\n                                                className={classes.button}\r\n                                            >\r\n                                                <b>View Rent</b>\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Paper>\r\n                                </ul>\r\n                            </li>\r\n                        ))}\r\n                    </List>\r\n                );\r\n                this.setState({\r\n                    storeCount: storeCount,\r\n                    stores: allStores,\r\n                    leaseCount: notCollected\r\n                })\r\n        }).catch( res => {\r\n            window.alert(res);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const classes = this.props.classes;\r\n        const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n        const leftBarPaper = clsx(classes.paper, classes.leftbarHeight);\r\n        return(\r\n            <div className={classes.root}>\r\n                <AppBar position=\"absolute\" className={clsx(classes.appBar, this.state.open && classes.appBarShift)}>\r\n                    <Toolbar className={classes.toolbar}>\r\n                        <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                            Dashboard\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <main className={classes.content}>\r\n                    <div className={classes.appBarSpacer} />\r\n                    <Container maxWidth=\"lg\" className={classes.container}>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item xs={12} md={4} lg={3}>\r\n                                <Paper className={leftBarPaper}>\r\n                                    <Card>\r\n                                        <CardHeader\r\n                                            avatar={\r\n                                                <Avatar aria-label=\"name\" className={classes.avatar}>\r\n                                                    {this.state.name.charAt(0)}\r\n                                                </Avatar>\r\n                                            }\r\n                                            title={<b>{this.state.name}</b>}\r\n                                            subheader={<b>{this.state.today.getDay()+\"/\"+this.state.today.getMonth()+\"/\"+this.state.today.getFullYear()}</b>}\r\n                                        />\r\n                                        <CardContent>\r\n                                            <Typography variant=\"h7\" color=\"textPrimary\" component=\"p\">\r\n                                                <b>Number of Stores: </b> {this.state.storeCount}\r\n                                            </Typography>\r\n                                            <Typography variant=\"h7\" color=\"textPrimary\" component=\"p\">\r\n                                                <b style={{color: 'red'}}>Lease Not Collected: </b> ${this.state.leaseCount}\r\n                                            </Typography> <br/>\r\n                                            <Button\r\n                                                variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                                className={classes.button}\r\n                                            >\r\n                                                <b>Add New Store</b>\r\n                                            </Button>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Paper>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={7} lg={7}>\r\n                                <Paper className={fixedHeightPaper}>\r\n                                    {this.state.stores}\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDash = withMyHook(Dash);\r\nexport default Dash;","import React, {Component} from 'react';\r\nimport Landing from \"./components/Dashboard/dash\";\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currentScreen: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            currentScreen: <Landing appContext={this}/>\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"App\">\r\n                {this.state.currentScreen}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}