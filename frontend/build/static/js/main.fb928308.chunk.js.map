{"version":3,"sources":["components/home.png","components/dashboard/dash.js","components/Authentication/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","createMuiTheme","typography","fontFamily","useStyles","makeStyles","cardStyle","width","display","height","marginLeft","marginTop","textAlign","backgroundColor","borderStyle","borderWidth","cardTitle","iframe","button","Component","Dash","props","state","classes","this","ThemeProvider","Card","className","CardContent","Typography","variant","component","style","alt","src","Home","Button","color","a","href","frameBorder","scrolling","marginHeight","marginWidth","title","Login","paddingLeft","appBar","position","App","currentScreen","homePage","push","appContext","setState","AppBar","Toolbar","IconButton","edge","aria-label","exact","path","withMyHook","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb928308.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.7bc7446a.png\";","import React, {Component} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {CardContent} from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Home from '../home.png';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst theme = createMuiTheme({\r\n\ttypography: {\r\n\t\tfontFamily: '\"Apple Color Emoji\"'\r\n\t},\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n\tcardStyle: {\r\n\t\twidth: \"30%\",\r\n\t\tdisplay: \"inline-block\",\r\n\t\theight: '35vw',\r\n\t\tmarginLeft: '10%',\r\n\t\tmarginTop: '2%',\r\n\t\ttextAlign: \"center\",\r\n\t\tbackgroundColor: \"rgba(255, 255, 255, 0.5)\",\r\n\t\tborderStyle: 'solid',\r\n\t\tborderWidth: 'thick'\r\n\t},\r\n\tcardTitle: {\r\n\t\tmarginTop: '20%'\r\n\t},\r\n\r\n\tiframe: {\r\n\t\tmarginLeft: '10%',\r\n\t\tborderStyle: 'solid',\r\n\t\tborderWidth: 'thick'\r\n\t},\r\n\r\n\tbutton: {\r\n\t\tmarginTop: \"5%\"\r\n\t}\r\n});\r\n\r\nfunction withMyHook(Component){\r\n\treturn function WrappedComponent(props){\r\n\t\tconst classes = useStyles();\r\n\t\treturn <Component {...props} classes={classes}/>\r\n\t}\r\n}\r\n\r\nclass Dash extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst classes = this.props.classes;\r\n\t\treturn(\r\n\t\t\t<ThemeProvider theme={theme}>\r\n\t\t\t\t<Card className={classes.cardStyle}>\r\n\t\t\t\t\t<CardContent className={classes.cardTitle}>\r\n\t\t\t\t\t\t<Typography variant=\"h3\" component=\"h2\">\r\n                            <b>Ahsan Plaza</b>\r\n\t\t\t\t\t\t</Typography>\r\n                        <img style={{marginTop: '5%', height: 140}} alt={\"home page icon\"} src={Home}/> <br/>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            <b>Location:</b> Gaibandha district, Bangladesh\r\n                        </Typography>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" a href=\"/login\" className={classes.button}>\r\n\t\t\t\t\t\tLog in\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Card>\r\n\t\t\t\t<iframe\r\n\t\t\t\t\tclassName={classes.iframe}\r\n\t\t\t\t\twidth=\"35%\"\r\n\t\t\t\t\theight=\"480\"\r\n\t\t\t\t\tframeBorder=\"0\"\r\n\t\t\t\t\tscrolling=\"no\"\r\n\t\t\t\t\tmarginHeight=\"0\"\r\n\t\t\t\t\tmarginWidth=\"0\"\r\n\t\t\t\t\ttitle={\"Map of shopping mall\"}\r\n\t\t\t\t\tsrc=\"https://maps.google.com/maps?q=gaibandha%2C&t=&z=15&ie=UTF8&iwloc=&output=embed\">\r\n\t\t\t\t</iframe>\r\n\t\t\t</ThemeProvider>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\n\r\nDash = withMyHook(Dash);\r\nexport default Dash;","import React, {Component} from 'react';\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login;","import React, {Component} from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport Dash from './components/dashboard/dash';\nimport Login from './components/Authentication/login';\n\nconst useStyles = makeStyles({\n  title:{\n    paddingLeft: 100,\n    textAlign: \"center\"\n  },\n  appBar:{\n    position: \"relative\"\n  }\n});\n\nfunction withMyHook(Component){\n  return function WrappedComponent(props){\n    const classes = useStyles();\n    return <Component {...props} classes={classes}/>\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentScreen: []\n    }\n  }\n\n  componentWillMount() {\n    let homePage=[];\n    homePage.push(<Dash appContext={this}/>);\n    this.setState({currentScreen: homePage})\n  }\n\n  render(){\n    const classes = this.props.classes;\n    return(\n      <div>\n        <AppBar className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n                edge=\"start\"\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography className={classes.title}>\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <div>\n        <Router>\n            <Switch>\n                <Route exact path='/login' component={Login} />\n            </Switch>\n        </Router>\n          {this.state.currentScreen}\n        </div>\n      </div>\n      )\n  }\n}\n\nApp = withMyHook(App);\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}